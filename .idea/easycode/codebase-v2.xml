<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/JSON ICU converter.py;C:/Users/vasilis.moschovos/PycharmProjects/PythonProject/Localization_scripts/README.md;C:/Users/vasilis.moschovos/PycharmProjects/PythonProject/Localization_scripts/XML language replacement.py;C:/Users/vasilis.moschovos/PycharmProjects/PythonProject/Localization_scripts/XML_creation_and_print.py" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/vasilis.moschovos/PycharmProjects/PythonProject/Localization_scripts&quot;:&quot;{\&quot;/XML_creation_and_print.py\&quot;:\&quot;This file does not contain any classes or functions. Instead, it demonstrates the creation of an XML document using the `xml.etree.ElementTree` module in Python.\\n\\nThe code performs the following steps:\\n\\n1. Creates a root element `\\\&quot;root\\\&quot;` using `ET.Element(\\\&quot;root\\\&quot;)`.\\n2. Creates a sub-element `\\\&quot;rules\\\&quot;` under the root element using `ET.SubElement(root, \\\&quot;rules\\\&quot;)`.\\n3. Defines a `break_value` variable, which can be set dynamically.\\n4. Creates a new `\\\&quot;rule\\\&quot;` sub-element under the `\\\&quot;rules\\\&quot;` element, with the `\\\&quot;break\\\&quot;` attribute set to the value of `break_value`.\\n5. Prints the resulting XML structure using `ET.tostring(root, encoding\\u003d\\u0027unicode\\u0027)`.\\n\\nThis code demonstrates the proper way to include attributes in XML elements using the `**{\\\&quot;attribute_name\\\&quot;: attribute_value}` syntax in the `ET.SubElement()` function.\&quot;,\&quot;/JSON ICU converter.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`transform_plural_keys`: This function reads a JSON file, detects and transforms ICU plural syntax into a nested structure, and writes the transformed data to a new JSON file.\\n\\n`process_value`: This function is a helper function used within `transform_plural_keys` to detect and transform ICU plural syntax into a nested structure.\\n\\n`transform`: This function is a recursive helper function used within `transform_plural_keys` to process all keys in the JSON structure.\\n\\nThe file is designed to transform a Lokalise-exported JSON file by detecting and transforming ICU plural syntax into a nested structure, and then writing the transformed data to a new JSON file.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. The file summary is as follows:\\n\\nThe document describes a repository that contains Python scripts designed to perform various file processing actions in a localization workflow. The scripts are specifically created for use on the Phrase localization suite.\&quot;,\&quot;/XML language replacement.py\&quot;:\&quot;This file does not contain any classes or functions. It is a Python script that reads an XML file, replaces the `xml:lang\\u003d\\\&quot;de\\\&quot;` attribute with `xml:lang\\u003d\\\&quot;it\\\&quot;`, and writes the updated content to a new file.\\n\\nThe script performs the following tasks:\\n\\n1. Defines the input and output file paths.\\n2. Reads the content of the input file.\\n3. Uses the `re.sub()` function to replace the `xml:lang\\u003d\\\&quot;de\\\&quot;` attribute with `xml:lang\\u003d\\\&quot;it\\\&quot;` in the content.\\n4. Writes the updated content to the output file.\\n5. Prints a message indicating that the file has been updated and saved.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/vasilis.moschovos/PycharmProjects/PythonProject/Localization_scripts&quot;:&quot;{\&quot;/JSON ICU converter.py\&quot;:{\&quot;file_path\&quot;:\&quot;/JSON ICU converter.py\&quot;,\&quot;file_name\&quot;:\&quot;JSON ICU converter.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;transform_plural_keys\&quot;,\&quot;method_parameters\&quot;:\&quot;(input_file, output_file)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;input_file\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;output_file\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[4,0],[41,53]]},{\&quot;method_name\&quot;:\&quot;process_value\&quot;,\&quot;method_parameters\&quot;:\&quot;(value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,4],[22,20]]},{\&quot;method_name\&quot;:\&quot;transform\&quot;,\&quot;method_parameters\&quot;:\&quot;(data)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;data\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[33,23]]}]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/XML language replacement.py\&quot;:{\&quot;file_path\&quot;:\&quot;/XML language replacement.py\&quot;,\&quot;file_name\&quot;:\&quot;XML language replacement.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/XML_creation_and_print.py\&quot;:{\&quot;file_path\&quot;:\&quot;/XML_creation_and_print.py\&quot;,\&quot;file_name\&quot;:\&quot;XML_creation_and_print.py\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>